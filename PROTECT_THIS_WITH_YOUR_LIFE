
# -*- coding: utf-8 -*-
"""
Created on Wed Jul 28 10:47:14 2021
@author: Dimitrios
"""

import numpy as np
import pandas as pd 
import pickle
import math
import matplotlib.pyplot as plt


def read1(name1):
#k4 = k4 != 100
    pkl_file = open(name1, 'rb')
    dot = pickle.load(pkl_file)
    dot = pd.DataFrame(dot)
    return dot

def read2(name2):
    stimuli = np.load(name2, allow_pickle=True)
    stimuli = pd.DataFrame(stimuli)
    return stimuli

def sizefilter(df,length):
    newtotal3=pd.DataFrame()
    for i in range(df['trial'].max()):
       # print('trial',i)
        b=df.loc[df['trial']==i]
        c=len(b)
        #print('length',c)
        if c<length:
            #print('adding this one')
            newtotal3= pd.concat([newtotal3,b])
    return newtotal3


def helpingdf(df):
    dist=df[['trial','distance']]
    dist2=dist.pivot(columns='trial',values='distance')
    distmin=dist2.min()
    test2=df.loc[df['distance'].isin(distmin)]
    test2['mid_x']=(test2['right_ear_x_c']+test2['left_ear_x_c'])/2
    test2['mid_y']=(test2['right_ear_y_c']+test2['left_ear_y_c'])/2
    test2['m']=(test2.y_snout-test2.mid_y)/(test2.x_snout-test2.mid_y)
    test2['b']=test2.y_snout-test2.m*test2.x_snout
    test2['x_infront']=(test2['y']-test2['b'])/test2['m']
    test2['testcol2']=test2.x_infront-test2.x
    test2['where']=['right' if i>0 else 'left' for i in  test2['testcol2'] ]
   
    test2['dist_left_ear']=np.sqrt((test2['left_ear_x_c']-test2['x'])**2+(test2['left_ear_y_c']-test2['y'])**2)
    test2['dist_right_ear']=np.sqrt((test2['right_ear_x_c']-test2['x'])**2+(test2['right_ear_y_c']-test2['y'])**2)
    test2['dist_l-r']=test2['dist_left_ear']-test2['dist_right_ear']
    test2['where_dist']=['right' if i>0 else 'left' for i in  test2['dist_l-r'] ]
    
    return test2


'''Begin by opening the stimulus data'''

k = read1('C:/Users/chara/Desktop/384952_4/thedata107.pkl') #open the pickle file with stimuli data

k.columns=['x','y','edges','opacity','radius','orientation','delete','x','y','edges','opacity','radius','orientation','laser','frame_time']
k = k.drop([0])
k.frame_time = k.frame_time.astype(float) #change the frame time into float 


k1=k.iloc[:,0:6] # first stimuli

k2=k.iloc[:,7:13] # second stimuli

k3 =k.iloc[:,13] # laser

k4 = k.iloc[:,14] # frame time


stim1 = pd.concat([k1, k3, k4], axis=1) #stimulus we are analysing

k = pd.concat([k2, k3, k4], axis=1) #send stimuli to analyse

################################################################################

''' Open the Pose file'''

df = pd.read_hdf('C:/Users/chara/Desktop/384952_4/blackfly_384952_2021-07-22_4_DLC.hdf5') #open the hdf5 file from DLC live

df.columns=['snout_x','snout_y','snout_likelihood','left_ear_x','left_ear_y',
            'left_ear_likelihood','right_ear_x','right_ear_y','right_ear_likelihood',
            'tail_x','tail_y','tail_likelihood','frame_time','pose_time'] #rename the columns from the DLC live file 

dlc = df['frame_time']
Psychopy = k['frame_time']

dlc = dlc.astype(float)
Psychopy = Psychopy.astype(float)
Psychopy = Psychopy.reset_index()
Psychopy = Psychopy.drop(columns=['index'])


#%%
k['dlc_idx'] = np.nan
for i in k.index:
    a = df.frame_time - k.frame_time.loc[i]
    idx = a.abs().idxmin()
    k.loc[i,'dlc_idx'] = idx
    
df = df.reset_index() 
df.columns=['dlc_idx','snout_x','snout_y','snout_likelihood','left_ear_x','left_ear_y',
            'left_ear_likelihood','right_ear_x','right_ear_y','right_ear_likelihood',
            'tail_x','tail_y','tail_likelihood','frame_time','pose_time'] #rename the columns from the DLC live file 

merged = df.merge(k, how='outer', on='dlc_idx')
merged = merged.fillna(method='ffill')
merged = merged.dropna()
