#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Jul  8 11:33:28 2021

@author: titan
"""


"""
Created on Sun Jun 13 16:29:38 2021

@author: EllinorAwesome
"""
import numpy as np
import pandas as pd
import pickle
import math
import matplotlib.pyplot as plt


def read1(name1):
    pkl_file = open(name1, 'rb')
    dot = pickle.load(pkl_file)
    dot = pd.DataFrame(dot)
    return dot

def read2(name2):
    stimuli = np.load(name2, allow_pickle=True)
    stimuli = pd.DataFrame(stimuli)
    return stimuli

k = read1('/home/titan/Desktop/Elli-mice-trials/1-4_Stmuli/328936_3/thedata114.pkl') #open the pickle file with stimuli data


#k = pd.read_pickle('')

k.columns=['x','y','edges','opacity','radius','orientation','frame_time'] #change the names of the columns

k.frame_time = k.frame_time.astype(float) #change the frame time into float

k = k.drop([0])


#k.frame_time = k.drop_duplicates('frame_time')


df = pd.read_hdf('/home/titan/Desktop/Elli-mice-trials/1-4_Stmuli/328936_3/blackfly_ 328936_2021-05-29_3_DLC.hdf5') #open the hdf5 file from DLC live

df.columns=['snout_x','snout_y','snout_likelihood','left_ear_x','left_ear_y',
            'left_ear_likelihood','right_ear_x','right_ear_y','right_ear_likelihood',
            'tail_x','tail_y','tail_likelihood','frame_time','pose_time'] #rename the columns from the DLC live file

df.frame_time = df.frame_time.astype(float)

k.frame_time = k.frame_time.round(1) #round the decimal points of the frame time to match the hdf5 file
 
df.frame_time = df.frame_time.round(1) #round the decimal points of the frame time to match the pickle file

merged = df.merge(k, how='outer', on='frame_time') # merge the hdf5 file with the pickle file dependent on the time frame

''' find the head body angle '''

[x1,y1] = [merged.snout_x,merged.snout_y]
[x2,y2] = [merged.left_ear_x,merged.left_ear_y]
[x3,y3] = [merged.right_ear_x,merged.right_ear_y]
[x4,y4] = [(x3+x2)/2,(y3+y2)/2]
angles = []
   
for i in range(merged.shape[0]):
    a = math.sqrt((x4[i]-x2[i])**2+(y4[i]-y2[i])**2)
    b = math.sqrt((x4[i]-x1[i])**2+(y4[i]-y1[i])**2)
    c = math.sqrt((x1[i]-x2[i])**2+(y1[i]-y2[i])**2)
    if (a**2+b**2-c**2)/(2*b*a) > 1:
        angle = math.acos(1)
    else:
        angle = math.acos((a**2+b**2-c**2)/(2*b*a))
    angle = math.degrees(angle)
    angles.append(angle)

right_head_angle = [180 - Value for Value in (angles)]  


[x1a,y1a] = [merged.tail_x,merged.tail_y]
[x2,y2] = [merged.left_ear_x,merged.left_ear_y]
[x3,y3] = [merged.right_ear_x,merged.right_ear_y]
[x4a,y4a] = [(x3+x2)/2,(y3+y2)/2]
angles1 = []
   
for i in range(merged.shape[0]):
    d = math.sqrt((x4a[i]-x2[i])**2+(y4a[i]-y2[i])**2)
    e = math.sqrt((x4a[i]-x1a[i])**2+(y4a[i]-y1a[i])**2)
    f = math.sqrt((x1a[i]-x2[i])**2+(y1a[i]-y2[i])**2)
   
    angle1 = math.acos((d**2+e**2-f**2)/(2*e*d))
    angle1 = math.degrees(angle1)
    angles1.append(angle1)
   
result = [Value + Value for Value, Value in zip(angles, angles1)]


data=df = pd.DataFrame(result)

total = pd.concat([data, merged], axis=1).reindex(merged.index) #merge angles into the total dataframe

''' Change the name of the columns to fit the new dataframe'''

total.columns=['left_head_body_angle', 'snout_x','snout_y','snout_likelihood','left_ear_x','left_ear_y',
            'left_ear_likelihood','right_ear_x','right_ear_y','right_ear_likelihood',
            'tail_x','tail_y','tail_likelihood','frame_time','pose_time','x','y','edges'
            ,'opacity','radius','orientation']


'''translate the frame time into real time'''

total.frame_time.astype(float)
first_frame = total.iloc[1,13]

translated_time=total.frame_time-first_frame

total = pd.concat([total, translated_time], axis=1).reindex(total.index)




total.left_head_body_angle.astype(float)



total.columns=['left_head_body_angle', 'snout_x','snout_y','snout_likelihood','left_ear_x','left_ear_y',
            'left_ear_likelihood','right_ear_x','right_ear_y','right_ear_likelihood',
            'tail_x','tail_y','tail_likelihood','frame_time','pose_time','x','y','edges'
            ,'opacity','radius','orientation','time']

#Correct the data to only show the apperance of the stimuli

total = total.fillna(method='ffill')

total = total.replace(100,0)



#convert coordinates into psychopy

snout = ((total.iloc[0:total['snout_x'].shape[0]-1,1:3] - [45, 15]) / 380) * .93 + .035
#snout = ((total.iloc[764,2] - [45, 15]) / 380) * .93 + .035
snout['snout_y'] = 1-snout['snout_y']
snout = (snout-0.5)*2

total = pd.concat([total, snout], axis=1).reindex(total.index)

leftear = ((total.iloc[0:total['left_ear_x'].shape[0]-1,4:6] - [45, 15]) / 380) * .93 + .035
#snout = ((total.iloc[764,2] - [45, 15]) / 380) * .93 + .035
leftear['left_ear_y'] = 1-leftear['left_ear_y']
leftear = (leftear-0.5)*2

total = pd.concat([total, leftear], axis=1).reindex(total.index)

rightear = ((total.iloc[0:total['right_ear_x'].shape[0]-1,7:9] - [45, 15]) / 380) * .93 + .035
#snout = ((total.iloc[764,2] - [45, 15]) / 380) * .93 + .035
rightear['right_ear_y'] = 1-rightear['right_ear_y']
rightear = (rightear-0.5)*2

total = pd.concat([total, rightear], axis=1).reindex(total.index)

tail = ((total.iloc[0:total['tail_x'].shape[0]-1,10:12] - [45, 15]) / 380) * .93 + .035
#snout = ((total.iloc[764,2] - [45, 15]) / 380) * .93 + .035
tail['tail_y'] = 1-tail['tail_y']
tail = (tail-0.5)*2

total = pd.concat([total, tail], axis=1).reindex(total.index)

#ight_angle = pd.DataFrame(right_head_angle)
#total = pd.concat([total, right_angle], axis=1).reindex(total.index)



total.columns=['left_head_body_angle', 'snout_x','snout_y','snout_likelihood','left_ear_x','left_ear_y',
            'left_ear_likelihood','right_ear_x','right_ear_y','right_ear_likelihood',
            'tail_x','tail_y','tail_likelihood','frame_time','pose_time','x','y','edges'
            ,'opacity','radius','orientation','time','x_snout','y_snout','left_ear_x_c','left_ear_y_c','right_ear_x_c','right_ear_y_c','tail_x_c','tail_y_c']




#total = total.loc[total['opacity'] != 0] # isolate the trials only with a dot apperance


"find the angle of the dot from x axis and invert head angle in pose so the subtraction with dot angle is correct"""

dangle = []
for i in total.index:
    dangle.append(math.atan2(total['y'][i], total['x'][i]))
total['dangle'] = dangle
total['dangle'] = np.rad2deg(total['dangle'])

total['dx'] = total['x_snout'] - total['x']
total['dy'] = total['y_snout'] - total['y']

total['dxsq'] = total['dx']**2
total['dysq'] = total['dy']**2
total['dis'] = total['dxsq'] + total['dysq']
total['dis'] = np.sqrt(total['dis'])


"""calculate velocity"""

spacevel = total[['tail_x_c', 'tail_y_c']]
velx = total['tail_x_c'].diff(1).div(0.1)
vely = total['tail_y_c'].diff(1).div(0.1)
velxsq = velx**2
velysq = vely**2
velsq = velxsq + velysq
total['velsq'] = velsq
total['vel'] = np.sqrt(total['velsq'])


diff_velocity = total.vel.diff();

acceleration = diff_velocity / total.time

acceleration = acceleration.abs()

total['vel'] = acceleration

#drop nan values

#total = total.dropna()
#%%

#calculate the line between the snout and ears

[x1,y1] = [total.x_snout,total.y_snout]
[x2,y2] = [total.left_ear_x_c,total.left_ear_y_c]
[x3,y3] = [total.right_ear_x_c,total.right_ear_y_c]
[x4,y4] = [(x3+x2)/2,(y3+y2)/2]

m = (y1 - y4) /(x1 - x4)
b = y1 - m * x1


ysnout = total['y_snout']
xsnout = total['x_snout']
xstimulus = total['x']
ystimulus = total['y']
y22 = m*(xstimulus) + b

mouseangles = []

for i in range(len(total)):
    a = y22[i]-ystimulus[i]  
    b = math.sqrt((xstimulus[i]-xsnout[i])**2 + (y22[i]-ysnout[i])**2)
    c = math.sqrt((xstimulus[i]-xsnout[i])**2 + (ystimulus[i]-ysnout[i])**2)
    angle = math.acos((b**2+c**2-a**2)/(2*b*c))
    mouseangles.append(angle)


df = pd.DataFrame(mouseangles)
total = pd.concat([total, df], axis=1).reindex(total.index)

total.columns=['left_head_body_angle', 'snout_x','snout_y','snout_likelihood','left_ear_x','left_ear_y',
            'left_ear_likelihood','right_ear_x','right_ear_y','right_ear_likelihood',
            'tail_x','tail_y','tail_likelihood','frame_time','pose_time','x','y','edges'
            ,'opacity','radius','orientation','time','x_snout','y_snout','left_ear_x_c','left_ear_y_c',
            'right_ear_x_c','right_ear_y_c','tail_x_c','tail_y_c','dangle','dx','dy','dxsq','dysq','distance','velsq','velocity','mouse_angle']

new_total = total.drop_duplicates(subset='time', keep='first', inplace=False, ignore_index=True)

# drop the nan values

new_total = new_total.dropna()

difference_time = new_total.time.diff();

# Create two new dataframe one with stimuli and one without
new_total1 = new_total[new_total['opacity'] == 0].reset_index()
new_total2 = new_total[new_total['opacity'] != 0]
new_total2 = new_total2.dropna()
new_total2 = new_total2.reset_index()


#find the start, end and the number of trials

new_total2.insert(40, 'trial', 0)
x = 0
idx = 0

for i in range(len(new_total2)):
    if x == new_total2['x'][i]:
        new_total2.iloc[i,40] = idx

    else:
        x = new_total2['x'][i]
        idx = idx + 1
        new_total2.iloc[i,40] = idx

# remove the first trial due to accelreation error
new_total2 = new_total2[new_total2['trial'] != 1]

# remove a trial if it is more than 8 rows
thresh = 9
s = new_total2['trial'].diff().ne(0).cumsum()

small_size = s.groupby(s).transform('size') < thresh
first_rows = ~s.duplicated()

new_total2 = new_total2[small_size | first_rows]

 
# calculate the difference in head body angle over each trial

headangle = new_total2['left_head_body_angle']
trials = new_total2['trial']

headangletrials = pd.concat([trials, headangle], axis=1).reindex(new_total2.index)

headangletrials = headangletrials.pivot(columns='trial', values='left_head_body_angle')

difference_angle = headangletrials.diff();

# Plotting changes om body angle trials

plt.figure(1)
plt.title('Head Body Angle Difference')
plt.plot(difference_angle, label = ['trial'])


#find the biggest difference in headbody turn

difference_angle1 = difference_angle.diff();

difference_angle1max = difference_angle1.max()

max_value = max(difference_angle1max)

# find the index = trial of the most distracting stimuli

max_index = difference_angle1max.idxmax()

print('the most distracting stimuli is:')
print(max_index)

new_total2['trial']

optimal_stimulus = new_total2.loc[new_total2['trial'] == max_index]
optimal_stimulus.to_csv('optimal_stimulus.csv', mode = 'a')
